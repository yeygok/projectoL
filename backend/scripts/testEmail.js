// Cargar variables de entorno ANTES de cualquier otra cosa
require('dotenv').config();

const emailService = require('../services/emailService');

/**
 * Script de prueba para el sistema de emails
 * Ejecutar: node scripts/testEmail.js
 */

async function testEmailSystem() {
  console.log('üß™ Iniciando pruebas del sistema de emails...\n');

  try {
    // 1. Test de conexi√≥n
    console.log('1Ô∏è‚É£ Probando conexi√≥n al servidor SMTP...');
    const connectionResult = await emailService.testConnection();
    console.log('Resultado:', connectionResult);
    console.log('');

    if (!connectionResult.success) {
      console.error('‚ùå No se pudo conectar al servidor de email');
      console.error('Error:', connectionResult.error);
      console.log('\n‚ö†Ô∏è Verifica:');
      console.log('  - EMAIL_USER est√° configurado en .env');
      console.log('  - EMAIL_PASS est√° configurado en .env');
      console.log('  - Si usas Gmail, necesitas una "Contrase√±a de Aplicaci√≥n"');
      console.log('  - Pasos: https://support.google.com/accounts/answer/185833');
      return;
    }

    // 2. Test de email de confirmaci√≥n de reserva
    console.log('2Ô∏è‚É£ Enviando email de prueba de confirmaci√≥n de reserva...');
    
    const reservaDataTest = {
      cliente: {
        nombre: 'Juan',
        apellido: 'P√©rez',
        email: process.env.EMAIL_USER, // Enviar al mismo email para testing
        telefono: '+57 300 123 4567'
      },
      reserva: {
        id: 999,
        fecha_servicio: new Date(),
        precio_total: 150000,
        estado: 'pendiente',
        observaciones: 'Esta es una prueba del sistema de emails'
      },
      servicio: {
        tipo: 'Lavado Premium',
        descripcion: 'Limpieza profunda con vapor y tratamiento antimanchas'
      },
      ubicacion: {
        direccion: 'Calle 123 # 45-67',
        barrio: 'Chapinero',
        localidad: 'Bogot√°'
      },
      tecnico: null
    };

    const emailResult = await emailService.sendReservaConfirmation(reservaDataTest);
    
    if (emailResult.success) {
      console.log('‚úÖ Email de confirmaci√≥n enviado exitosamente!');
      console.log(`üìß Enviado a: ${reservaDataTest.cliente.email}`);
      console.log(`üì¨ Message ID: ${emailResult.messageId}`);
    } else {
      console.error('‚ùå Error al enviar email de confirmaci√≥n');
      console.error('Error:', emailResult.error);
    }

    console.log('\n3Ô∏è‚É£ Resumen de pruebas:');
    console.log('='.repeat(50));
    console.log(`Conexi√≥n SMTP: ${connectionResult.success ? '‚úÖ OK' : '‚ùå FAIL'}`);
    console.log(`Email de prueba: ${emailResult.success ? '‚úÖ OK' : '‚ùå FAIL'}`);
    console.log('='.repeat(50));

    if (connectionResult.success && emailResult.success) {
      console.log('\nüéâ ¬°Sistema de emails funcionando correctamente!');
      console.log('üìù Revisa tu bandeja de entrada para ver el email de prueba');
    } else {
      console.log('\n‚ö†Ô∏è Hay problemas con el sistema de emails');
      console.log('Por favor revisa la configuraci√≥n en .env');
    }

  } catch (error) {
    console.error('\n‚ùå Error durante las pruebas:', error.message);
    console.error('Stack:', error.stack);
  }
}

// Ejecutar pruebas
testEmailSystem()
  .then(() => {
    console.log('\n‚úÖ Pruebas completadas');
    process.exit(0);
  })
  .catch((error) => {
    console.error('\n‚ùå Error fatal:', error);
    process.exit(1);
  });
